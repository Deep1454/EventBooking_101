version: '3.9'

services:

  keycloak:
    container_name: keycloak
    hostname: keycloak
    image: quay.io/keycloak/keycloak:24.0.1
    command: [ "start-dev", "--import-realm" ]
    environment:
      DB_VENDOR: postgres
      DB_ADDR: postgres-keycloak
      DB_DATABASE: keycloak
      DB_USER: admin
      DB_PASSWORD: password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: password
      ROOT_LOGLEVEL: DEBUG
      JBOSS_LOG_MANAGER_ROOT_LOGGER: DEBUG, stdout, FILE
    ports:
      - "8080:8080"
    volumes:
      - ./local-docker-file/keycloak/realms/:/opt/keycloak/data/import
    depends_on:
      - postgres-keycloak
    networks:
      - spring

  api-gateway:
    image: api-gateway
    ports:
      - "9001:9001"
    build:
     context: ./api-gateway
     dockerfile: ./Dockerfile
    environment:
       SPRING_PROFILES_ACTIVE: docker
       SPRING_APPLICATION_JSON={"logging":{"level":{"root":"INFO","com.example.apigateway":"DEBUG"}}}:
    container_name: api-gateway
    networks:
     - spring

  postgres-keycloak:
    image: postgres
    ports:
      - "5431:5432"
    container_name: postgres-keycloak
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=keycloak
      - PGDATA=/data/postgres
    volumes:
      - ./data/postgres/keycloak:/var/lib/postgresql/data # The database will persist data here on the host machine.
    networks:
      - spring


  user-service:
    image: user-service
    ports:
      - "4010:4010"
    build:
      context: ./UserService
      dockerfile: ./Dockerfile
    container_name: user-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - postgres-user-service
    networks:
      - spring


  room-service:
    image: room-service
    ports:
      - "4011:4011"
    build:
      context: ./RoomService
      dockerfile: ./Dockerfile
    container_name: room-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - postgres-room-service
    networks:
      - spring


  booking-service:
    image: booking-service
    ports:
      - "4013:4013"
    build:
      context: ./BookingService
      dockerfile: ./Dockerfile
    container_name: booking-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - mongodb
    networks:
      - spring

  event-service:
    image: event-service
    ports:
      - "4014:4014"
    build:
      context: ./EventService
      dockerfile: ./Dockerfile
    container_name: event-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - mongodb
    networks:
      - spring


  approval-service:
    image: approval-service
    ports:
      - "4015:4015"
    build:
      context: ./ApprovalService
      dockerfile: ./Dockerfile
    container_name: approval-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - mongodb
    networks:
      - spring


  postgres-user-service:
    image: postgres
    ports:
      - "5432:5432"
    container_name: postgres-user-service
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
    volumes:
      - ./data/postgres/users:/var/lib/postgresql/data
      - ./init/postgres/users/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - spring


  postgres-room-service:
    image: postgres
    ports:
      - "5433:5432"
    container_name: postgres-room-service
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=RoomService
    volumes:
      - ./data/postgres/rooms:/var/lib/postgresql/data
      - ./init/postgres/rooms/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - spring


  pgadmin:
    image: dpage/pgadmin4
    ports:
      - "8888:80"
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: user@domain.ca
      PGADMIN_DEFAULT_PASSWORD: password
    networks:
      - spring

  mongodb:
    image: mongo
    container_name: mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
    volumes:
      - ./data/mongo/booking:/data/db
      - ./init/mongo/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d:ro
    networks:
      - spring


  mongo-express-booking:
    image: mongo-express
    container_name: mongo-express-event-booking
    ports:
      - "8082:8081"
    environment:
      ME_CONFIG_MONGODB_SERVER: mongodb
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: password
    depends_on:
      - mongodb
    networks:
      - spring

volumes:
  mongo-db:
    driver: local


networks:
  spring:
    driver: bridge